<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Identity.WebAPI</name>
    </assembly>
    <members>
        <member name="T:Identity.WebAPI.Configurations.CorsConfig">
            <summary>
            Extension methods for setting up CORS Configurations.
            </summary>
        </member>
        <member name="F:Identity.WebAPI.Configurations.CorsConfig.CorsPolicy">
            <summary>
            CORS Policy name of custom configured policy
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Configurations.CorsConfig.AddCorsIdentity(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers CORS allowed domains from appsettings.json under "CORS:AllowedHosts"
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.</param>
        </member>
        <member name="T:Identity.WebAPI.Configurations.DatabaseIntializer">
            <summary>
            This class creates database if it doesn't exist and initializes database with seed data
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Configurations.DatabaseIntializer.InitDatabase(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Creates database if it doesn't exist and initializes database with seed data
            </summary>
        </member>
        <member name="T:Identity.WebAPI.Configurations.DependencyResolver">
            <summary>
            Extension methods for resolving dependencies in Constructor DI using IOC Container
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Configurations.DependencyResolver.RosolveDependencies(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Registers Interfaces with corresponding implementation Classes for IOC Contaienr.
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <param name="configuration">The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration"/>.</param>
        </member>
        <member name="T:Identity.WebAPI.Configurations.ExceptionMiddleware">
            <summary>
            Global Exception Handeller Middleware
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Configurations.ExceptionMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Middleware Constructor
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Configurations.ExceptionMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Pass execution to next level
            </summary>
        </member>
        <member name="T:Identity.WebAPI.Controllers.ApplicationController">
            <summary>
            Application Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.#ctor(Identity.Domain.Abstraction.IApplicationService)">
            <summary>
            Application Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.GetAsync(System.Int32)">
            <summary>
            Retrieves a specific Application Details by unique id
            </summary>
            <param name="appId">Application Id or unique identifier which is the primary key of the application</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.AddAsync(Identity.Data.Models.ApplicationInfoModel)">
            <summary>
            For adding new application to eco systemmenu
            </summary>
            <param name="appInfo">Application View Model Object</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.UpdateAsync(Identity.Data.Models.ApplicationInfoModel)">
            <summary>
            For updating existing application data
            </summary>
            <param name="appInfo">Application View Model Object</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.DeleteAsync(System.Int32)">
            <summary>
            For retiring an existing application
            </summary>
            <param name="appId">Application Id or unique identifier which is the primary key of the application</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.GetAllAsync">
            <summary>
            Get collection of all applications
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.ApplicationController.GetPagedAsync(RedBook.Core.Models.PagedModel{Identity.Data.Models.ApplicationInfoModel})">
            <summary>
            For retrieving application list in paginated form
            </summary>
            <param name="pagedApplications">Paginated application view model passed over query parameters</param>
        </member>
        <member name="T:Identity.WebAPI.Controllers.AuthController">
            <summary>
            Auth Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.AuthController.#ctor(Identity.Domain.Abstraction.IUserService)">
            <summary>
            Authentication Module Constructor
            </summary>
            <param name="userService">An implementation of IUserService injected by IOC Controller</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.AuthController.LogIn(Identity.Data.Models.UserModel)">
            <summary>
            Authenticates users
            </summary>
            <param name="user">User View Model Object</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.EmployeeController.Register(System.Int32,Identity.Data.Models.UserModel)">
            <summary>
            Register new/existing users to organization as employee
            </summary>
            <param name="orgId">Unique Identifier/Primary Key of the Organization that the user is going to be employed at</param>
            <param name="user">Application Id or unique identifier which is the primary key of the application</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.EmployeeController.GetPaged(RedBook.Core.Models.PagedModel{Identity.Data.Models.UserModel},System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.EmployeeController.UpdateEmployeeRoles(System.Int32,Identity.Data.Models.UserModel)">
            <summary>
            Manage roles of employees
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.EmployeeController.ReleaseEmployee(System.Int32,System.Int32)">
            <summary>
            Release an employee from an organization you own or are an admin of
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.EmployeeController.AdminOf">
            <summary>
            Get list of organizations the logged, in user has admin access to
            </summary>
        </member>
        <member name="T:Identity.WebAPI.Controllers.OrganizationController">
            <summary>
            Organization Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.#ctor(Identity.Domain.Abstraction.IOrganizationService)">
            <summary>
            Organization Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.Get(System.Int32)">
            <summary>
            Get organization details by organization Id
            </summary>
            <param name="orgId">Organization Id or unique identifier which is the primary key of organization table</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.GetAll">
            <summary>
            Get all organizations owned by user
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.Add(Identity.Data.Models.OrganizationModel)">
            <summary>
            Add new organization with details
            </summary>
            <param name="orgInfo">Organization details object</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.Update(Identity.Data.Models.OrganizationModel)">
            <summary>
            Update existing organization with details
            </summary>
            <param name="orgInfo">Organization details object</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.GetPagedAsync(RedBook.Core.Models.PagedModel{Identity.Data.Models.OrganizationModel})">
            <summary>
            Get Paginated collection of organizations
            </summary>
            <param name="orgPagedCollection">Paginated Organization list for paging table</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.OrganizationController.Delete(System.Int32)">
            <summary>
            Delete existing organization with details
            </summary>
            <param name="orgId">Organization Id or unique identifier which is the primary key of organization table</param>
        </member>
        <member name="T:Identity.WebAPI.Controllers.RoleController">
            <summary>
            Role Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RoleController.#ctor(Identity.Domain.Abstraction.IRoleService)">
            <summary>
            Role Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RoleController.RemoveRoleAsync(System.Int32)">
            <summary>
            Remove roles by Role Id
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RoleController.GetByOrg(System.Int32)">
            <summary>
            Returns roles by Organization Id
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RoleController.MapRoleRoute(System.Int32,System.Int32)">
            <summary>
            Map role with route for permission
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RoleController.GetOrganizationsAllowedToUserByRoute(System.Int32,System.Int32)">
            <summary>
            Map role with route for permission
            </summary>
        </member>
        <member name="T:Identity.WebAPI.Controllers.RouteController">
            <summary>
            Route Controller for working with routes
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.#ctor(Identity.Domain.Abstraction.IRouteServices)">
            <summary>
            Route Controller for working with routes
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.GetPaged(RedBook.Core.Models.PagedModel{Identity.Data.Models.RouteModel})">
            <summary>
            Paginated list of application routes (System Admin User Only)
            </summary>
            <param name="pagedRouteCollection">An implementation of IApplicationService injected by IOC Controller</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.GetAll">
            <summary>
            Returns all routes of specified application
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.GetMenu">
            <summary>
            Returns allowed menu routes of requesting user
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.Get(System.Int32)">
            <summary>
            Returns detailed info of route identified by id provided
            </summary>
            <param name="routeId">User unique identifier<see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.GetRoutesByRoleId(System.Int32)">
            <summary>
            Returns collection of Routes allowed to dole by role id
            </summary>
            <param name="roleId">User unique identifier<see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.Add(Identity.Data.Models.RouteModel)">
            <summary>
            Add new route to specified application
            </summary>
            <param name="routeInfo">User unique identifier<see cref="T:Identity.Data.Models.RouteModel"/>.</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.Update(Identity.Data.Models.RouteModel)">
            <summary>
            Updates existing route information
            </summary>
            <param name="routeInfo">User unique identifier<see cref="T:Identity.Data.Models.RouteModel"/>.</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.RouteController.Delete(System.Int32)">
            <summary>
            Permanantly deletes route specified
            </summary>
            <param name="routeId">User unique identifier<see cref="T:System.Int32"/>.</param>
        </member>
        <member name="T:Identity.WebAPI.Controllers.UserController">
            <summary>
            User Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.#ctor(Identity.Domain.Abstraction.IUserService)">
            <summary>
            User Module
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.ArchiveAccount(System.Int32)">
            <summary>
            Archive own account only. User may join a different organization under redbook, thus organization admins should not hold the right to archive an user.
            </summary>
            <param name="userId">User unique identifier<see cref="T:System.Int32"/>.</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.UnArchiveAccount(System.Int32)">
            <summary>
            Unarchive own account or an user under own organization (admin user only)
            </summary>
            <param name="userId">Application Id or unique identifier which is the primary key of the application</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.Delete(System.Int32)">
            <summary>
            Permanantly delete user information (system admin user only)
            </summary>
            <param name="userId">Application Id or unique identifier which is the primary key of the application</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.ResetPassword(System.Int32)">
            <summary>
            Reset own or user password (system admin user only)
            </summary>
            <param name="userId">Application Id or unique identifier which is the primary key of the application</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.Update(Identity.Data.Models.UserModel)">
            <summary>
            Update own user information
            </summary>
            <param name="user">User details object<see cref="T:Identity.Data.Models.UserModel"/>Updated User Data</param>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.GetUserOrgs">
            <summary>
            Get list of organizations that the user is related to
            </summary>
        </member>
        <member name="M:Identity.WebAPI.Controllers.UserController.GetUserByBusiness(RedBook.Core.Models.PagedModel{Identity.Data.Models.UserModel},System.Int32)">
            <summary>
            Retrieves a paged list of users associated with the specified organization. (Organization admin access only)
            </summary>
            <param name="pagedModel">The paged model containing the requested page size and page number.</param>
            <param name="orgId">The ID of the organization to retrieve users for.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the paged list of users.</returns>
        </member>
    </members>
</doc>
